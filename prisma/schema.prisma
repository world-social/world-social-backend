generator client {
  provider = "prisma-client-js"
}

generator prisma_client {
  provider = "prisma-client-js"
  seed     = "node prisma/seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique
  tokenBalance  Decimal       @default(0) @db.Decimal(10,2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  avatar        String?
  email         String        @unique
  password      String
  followers     Int           @default(0)
  following     Int           @default(0)
  isInfluencer  Boolean       @default(false)
  totalEarnings Decimal       @default(0) @db.Decimal(10,2)
  worldId       String        @unique
  badges        Badge[]
  comments      Comment[]
  likes         Like[]
  nfts          NFT[]
  streaks       Streak[]
  transactions  Transaction[]
  videos        Video[]
  tokens        Int             @default(0)
  streak        Int             @default(0)
  lastStreakDate DateTime?
  totalWatchTime Int             @default(0)
  userAchievements UserAchievement[]
  userMissions    UserMission[]
}

model Video {
  id           String    @id @default(uuid())
  userId       String
  thumbnailUrl String?
  views        Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  description  String?
  duration     Int
  title        String
  likeCount    Int       @default(0)
  tags         String[]
  url          String
  tokenReward  Int       @default(0)
  comments     Comment[]
  likes        Like[]
  nfts         NFT[]
  transactions Transaction[]
  user         User      @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  videoId     String?
  amount      Decimal  @db.Decimal(10,2)
  createdAt   DateTime @default(now())
  description String?
  type        String
  user        User     @relation(fields: [userId], references: [id])
  video       Video?   @relation(fields: [videoId], references: [id])
}

model Mission {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // e.g., "WATCH_VIDEOS", "LIKE_VIDEOS", "COMMENT_VIDEOS"
  requirements Json     // Array of requirements with type and amount
  reward      Int      // Token reward
  duration    Int      // Duration in hours
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userMissions UserMission[]
}

model UserMission {
  id           String   @id @default(cuid())
  userId       String
  missionId    String
  progress     Int      @default(0)
  completed    Boolean  @default(false)
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  mission      Mission  @relation(fields: [missionId], references: [id])

  @@unique([userId, missionId])
}

model Streak {
  id            String   @id @default(uuid())
  userId        String
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActive    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Badge {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String
  earnedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model NFT {
  id        String   @id @default(uuid())
  userId    String
  videoId   String?
  tokenId   String   @unique
  metadata  Json
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video?   @relation(fields: [videoId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  requirements Json     // Array of requirements with type and amount
  reward      Int      // Token reward
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userAchievements UserAchievement[]
}

model UserAchievement {
  id           String      @id @default(cuid())
  userId       String
  achievementId String
  progress     Int         @default(0)
  completed    Boolean     @default(false)
  completedAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  achievement  Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

enum TransactionType {
  EARN
  WITHDRAW
  PURCHASE
  SALE
}
